// Redux slice for managing course creation and editing flow
import { createSlice } from '@reduxjs/toolkit'; // Utility to generate Redux slice with actions and reducer

// Initial state values for course flow
const initialState = {
  step: 1, // Current step in multi-step course creation process
  course: null, // Holds course data object when set
  editCourse: false, // Flag indicating if editing existing course or creating new
  paymentLoading: false, // Indicates if payment is in progress (loading state)
};

// Create a Redux slice named 'course' with state and reducers
const courseSlice = createSlice({
  name: 'course',
  initialState, // Set the initial state defined above
  reducers: {
    // Set the current step in the course flow
    setStep: (state, action) => {
      state.step = action.payload;
    },
    // Store course data (create or load existing)
    setCourse: (state, action) => {
      state.course = action.payload;
    },
    // Toggle edit mode for an existing course
    setEditCourse: (state, action) => {
      state.editCourse = action.payload;
    },
    // Update payment loading state during transactions
    setPaymentLoading: (state, action) => {
      state.paymentLoading = action.payload;
    },
    // Reset the course-related state back to defaults
    resetCourseState: (state) => {
      state.step = 1;
      state.course = null;
      state.editCourse = false;
      // Note: paymentLoading remains unchanged to avoid disrupting ongoing flows
    },
  },
});

// Export action creators generated by createSlice
export const {
  setStep,
  setCourse,
  setEditCourse,
  setPaymentLoading,
  resetCourseState,
} = courseSlice.actions;

// Export the reducer to be included in the store configuration
export default courseSlice.reducer;
